/*
 *  Copyright 2010 by Texas Instruments Incorporated.
 *  All rights reserved. Property of Texas Instruments Incorporated.
 *  Restricted rights to use, duplicate or disclose this code are
 *  granted through contract.
 *
 */
/*
 *  ======== hello.tcf ========
 *  Configuration script used to generate the example's configuration files
 */

utils.loadPlatform("ti.platforms.ezdsp5502");

bios.enableRealTimeAnalysis(prog);
bios.enableMemoryHeaps(prog);
bios.enableRtdx(prog);
bios.enableTskManager(prog);

/*
 * Enable heaps in DARAM and define label SEG0 for heap usage.
 */

bios.DARAM.createHeap      = true;
bios.DARAM.enableHeapLabel = true;
bios.DARAM["heapLabel"]    = prog.extern("SEG0");
bios.DARAM.heapSize        = 0x500;
bios.MEM.BIOSOBJSEG = prog.get("DARAM");
bios.MEM.MALLOCSEG = prog.get("DARAM");


/*
 *  Define the GBL memory model 
 */

bios.GBL.MEMORYMODEL = "LARGE";

/*
 * Set the clock microseconds to 1000
 */

bios.CLK.MICROSECONDS = 1000; 
/*
 * Create and initialize a LOG object
 */

var trace;
trace         = bios.LOG.create("trace");
trace.bufLen  = 1024;
trace.logType = "circular";

/*
 * Set the buffer length of LOG_system buffer
 */

bios.LOG_system.bufLen = 512;

bios.SWI.instance("KNL_swi").order = 2;
bios.GBL.BOARDNAME = "c5502";
bios.IDL.instance("LNK_dataPump").order = 1;
bios.IDL.instance("RTA_dispatcher").order = 2;
bios.IDL.instance("IDL_cpuLoad").order = 3;
bios.IDL.instance("PWRM_idleDomains").order = 4;
bios.IDL.create("IDL0");
bios.IDL.instance("IDL0").order = 5;
bios.IDL.instance("IDL0").fxn = prog.extern("myIDLThread");
bios.HWI.instance("HWI_INT6").fxn = prog.extern("HWI_I2S_Rx");
bios.HWI.instance("HWI_INT6").useDispatcher = 1;
bios.HWI.instance("HWI_INT6").interruptMask0 = "all";
bios.HWI.instance("HWI_INT6").interruptMask1 = "all";
bios.HWI.instance("HWI_INT7").fxn = prog.extern("HWI_I2S_Tx");
bios.HWI.instance("HWI_INT7").useDispatcher = 1;
bios.HWI.instance("HWI_INT7").interruptMask0 = "all";
bios.HWI.instance("HWI_INT7").interruptMask1 = "all";
bios.GBL.CLKOUT = 300.0000;
bios.CLK.TIMERSELECT = "Timer 0";

/*
 * Create and initialize a TSK object
 */

var task;
task          = bios.TSK.create("task");
task.priority = 1;
task.fxn      = prog.decl("taskFxn");
task.arg0     = 10;


bios.HWI.instance("HWI_INT6").useDispatcher = 0;
bios.HWI.instance("HWI_INT7").useDispatcher = 0;
bios.TSK.create("TSK_pam_tx");
bios.TSK.instance("TSK_pam_tx").order = 1;
bios.TSK.instance("TSK_pam_tx").fxn = prog.extern("tsk_pam_tx");
bios.TSK.create("TSK_pam_rx");
bios.TSK.instance("TSK_pam_rx").order = 2;
bios.TSK.instance("TSK_pam_rx").fxn = prog.extern("tsk_pam_rx");
bios.MBX.create("MBX_TSK_pam_rx_input");
bios.MBX.instance("MBX_TSK_pam_rx_input").messageSize = 256;
bios.MBX.instance("MBX_TSK_pam_rx_input").length = 1;
bios.MBX.create("MBX_TSK_pam_symbol_in");
bios.MBX.create("MBX_TSK_pam_symbol_out");
bios.MBX.create("MBX_TSK_pam_channel_input");
bios.MBX.create("MBX_TSK_pam_channel_output");
bios.MBX.instance("MBX_TSK_pam_rx_input").destroy();
bios.MBX.instance("MBX_TSK_pam_channel_input").messageSize = 256;
bios.MBX.instance("MBX_TSK_pam_channel_output").messageSize = 256;
bios.TSK.create("TSK_pam_channel");
bios.TSK.instance("TSK_pam_channel").order = 3;
bios.TSK.instance("TSK_pam_channel").fxn = prog.extern("tsk_pam_channel");
bios.MBX.create("MBX_TSK_pam_channel_noise_up");
bios.MBX.create("MBX_TSK_pam_channel_noise_down");
bios.TSK.create("TSK_poll_switches");
bios.TSK.instance("TSK_poll_switches").order = 4;
bios.TSK.instance("TSK_poll_switches").fxn = prog.extern("tsk_poll_switches");
bios.SWI.instance("PRD_swi").order = 1;
bios.PRD.create("PRD_IO_poll_switches");
bios.PRD.instance("PRD_IO_poll_switches").order = 1;
bios.PRD.instance("PRD_IO_poll_switches").period = 1000;
bios.PRD.instance("PRD_IO_poll_switches").period = 200;
bios.PRD.instance("PRD_IO_poll_switches").fxn = prog.extern("tsk_poll_switches");
bios.TSK.create("TSK_disp");
bios.TSK.instance("TSK_disp").order = 5;
bios.TSK.instance("TSK_disp").fxn = prog.extern("tsk_disp");
bios.MBX.create("MBX_TSK_disp_in");
bios.PRD.instance("PRD_IO_poll_switches").fxn = prog.extern("prd_poll_switches");
bios.TSK.instance("TSK_idle").order = 1;
bios.TSK.instance("task").order = 2;
bios.TSK.instance("TSK_pam_tx").order = 3;
bios.TSK.instance("TSK_pam_rx").order = 4;
bios.TSK.instance("TSK_pam_channel").order = 5;
bios.TSK.instance("TSK_disp").order = 6;
bios.TSK.instance("TSK_poll_switches").destroy();
bios.PRD.instance("PRD_IO_poll_switches").period = 100;
bios.PRD.instance("PRD_IO_poll_switches").destroy();
// !GRAPHICAL_CONFIG_TOOL_SCRIPT_INSERT_POINT!

if (config.hasReportedError == false) {
    prog.gen();
}
